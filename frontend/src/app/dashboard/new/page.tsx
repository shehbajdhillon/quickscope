import { Button } from "@/components/ui/button";
import { Card, CardBody, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { css } from "@/styled-system/css";
import { Stack, HStack, Spacer, VStack } from "@/styled-system/jsx";
import { ArrowRightIcon, CheckIcon, ChevronsUpDownIcon } from "lucide-react";

import * as Select from '@/components/ui/select'
import { MenuSeparator } from "@ark-ui/react";


const NewPage = () => {
  return (
    <Stack gap={"20px"} justifyContent={"center"}>

      <Stack gap="-20px">
        <h1 className={css({ fontSize: { base: "60px", lg: "90px" }, fontWeight: "medium" })}>New Monitor</h1>
        <p className={css({ fontWeight: "medium", fontSize: "25px" })}>
          To setup a new monitor, import a git repository and an observability source.
        </p>
      </Stack>
      <VStack>
        <Stack direction={"column"}>
          <Stack
            direction={{ base: "column", md: "row" }}
            gap="30px"
          >
            <Stack maxWidth={{ md: "672px" }} w="full">
              <GithubImportBox />
            </Stack>
            <Stack maxWidth={{ md: "672px" }} w="full">
              <ObservabilityImportBox />
            </Stack>
          </Stack>
          <HStack pt="15px">
            <Spacer />
            <Button>
              Continue
              <ArrowRightIcon />
            </Button>
          </HStack>
        </Stack>
      </VStack>
    </Stack>
  );
};

const ObservabilityImportBox = () => {
  const items = [
    { label: 'Vercel (Logs)', value: 'vercel' },
    { label: 'PostHog', value: 'posthog' },
    { label: 'Railway.app (Logs)', value: 'railwayapp'},
    { label: 'Rollbar (Logs)', value: 'rollbar' },
    { label: 'Heroku (Logs)', value: 'heroku' },
  ]

  return (
    <Card borderColor={"red"}>
      <CardHeader>
        <CardTitle>Import Observability Source</CardTitle>
        <CardDescription>
          Connect services recording logs and user sessions generated by your application.
        </CardDescription>
      </CardHeader>
      <CardBody gap={"20px"}>

        <HStack>
          <Select.Root positioning={{ sameWidth: true }} items={items} defaultValue={[items[0].value]}>
            <Select.Control>
              <Select.Trigger>
                <Select.ValueText />
                <ChevronsUpDownIcon />
              </Select.Trigger>
            </Select.Control>
            <Select.Positioner>
              <Select.Content>
                <Select.ItemGroup id="gitprovider">
                  <Select.ItemGroupLabel htmlFor="gitprovider">Account</Select.ItemGroupLabel>
                  {items.map((item) => (
                    <Select.Item key={item.value} item={item}>
                      <Select.ItemText>{item.label}</Select.ItemText>
                      <Select.ItemIndicator>
                        <CheckIcon />
                      </Select.ItemIndicator>
                    </Select.Item>
                  ))}
                </Select.ItemGroup>
              </Select.Content>
            </Select.Positioner>
          </Select.Root>
        </HStack>

        <HStack>
          PlanetCast
          <Spacer />
          <Button>
           Import
          </Button>
        </HStack>

        <HStack>
          Checkers
          <Spacer />
          <Button>
           Import
          </Button>
        </HStack>


        <MenuSeparator />
        <text>All connected services will show here. (None connected yet)</text>


      </CardBody>


      <CardFooter>
      </CardFooter>
    </Card>
  );
};

const GithubImportBox = () => {

  const items = [
    { label: 'shehbajdhillon', value: 'shehbajdhillon' },
    { label: 'jointaro', value: 'jointaro' },
    { label: 'spendsense', value: 'spendsense'},
    { label: 'interviewingio', value: 'interviewingio' },
  ]

  return (
    <Card borderColor={"red"}>
      <CardHeader>
        <CardTitle>Import Git Repository</CardTitle>
        <CardDescription>
          Connect Git repositories containing your application code.
        </CardDescription>
      </CardHeader>
      <CardBody gap={"20px"}>

        <HStack>
          <Select.Root positioning={{ sameWidth: true }} items={items} defaultValue={[items[0].value]}>
            <Select.Control>
              <Select.Trigger>
                <Select.ValueText />
                <ChevronsUpDownIcon />
              </Select.Trigger>
            </Select.Control>
            <Select.Positioner>
              <Select.Content>
                <Select.ItemGroup id="gitprovider">
                  <Select.ItemGroupLabel htmlFor="gitprovider">Account</Select.ItemGroupLabel>
                  {items.map((item) => (
                    <Select.Item key={item.value} item={item}>
                      <Select.ItemText>{item.label}</Select.ItemText>
                      <Select.ItemIndicator>
                        <CheckIcon />
                      </Select.ItemIndicator>
                    </Select.Item>
                  ))}
                </Select.ItemGroup>
              </Select.Content>
            </Select.Positioner>
          </Select.Root>


          <Input placeholder="Search" />
        </HStack>

        <HStack>
          PlanetCast
          <Spacer />
          <Button>
           Import
          </Button>
        </HStack>

        <HStack>
          Checkers
          <Spacer />
          <Button>
           Import
          </Button>
        </HStack>

        <HStack>
          Taro
          <Spacer />
          <Button>
           Import
          </Button>
        </HStack>

        <HStack>
          InterviewingIo
          <Spacer />
          <Button>
           Import
          </Button>
        </HStack>

        <MenuSeparator />

        <text>All connected repositories will show here. (None connected yet)</text>

      </CardBody>
      <CardFooter>
      </CardFooter>
    </Card>
  );
};

export default NewPage;

