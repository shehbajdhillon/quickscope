// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/tabbed/pqtype"
)

type IntegrationType string

const (
	IntegrationTypeGITHUB     IntegrationType = "GITHUB"
	IntegrationTypePOSTHOG    IntegrationType = "POSTHOG"
	IntegrationTypeRAILWAYAPP IntegrationType = "RAILWAYAPP"
)

func (e *IntegrationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IntegrationType(s)
	case string:
		*e = IntegrationType(s)
	default:
		return fmt.Errorf("unsupported scan type for IntegrationType: %T", src)
	}
	return nil
}

type NullIntegrationType struct {
	IntegrationType IntegrationType
	Valid           bool // Valid is true if IntegrationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIntegrationType) Scan(value interface{}) error {
	if value == nil {
		ns.IntegrationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IntegrationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIntegrationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IntegrationType), nil
}

type MembershipType string

const (
	MembershipTypeOWNER  MembershipType = "OWNER"
	MembershipTypeADMIN  MembershipType = "ADMIN"
	MembershipTypeMEMBER MembershipType = "MEMBER"
)

func (e *MembershipType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MembershipType(s)
	case string:
		*e = MembershipType(s)
	default:
		return fmt.Errorf("unsupported scan type for MembershipType: %T", src)
	}
	return nil
}

type NullMembershipType struct {
	MembershipType MembershipType
	Valid          bool // Valid is true if MembershipType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMembershipType) Scan(value interface{}) error {
	if value == nil {
		ns.MembershipType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MembershipType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMembershipType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MembershipType), nil
}

type TeamType string

const (
	TeamTypePERSONAL TeamType = "PERSONAL"
	TeamTypeTEAM     TeamType = "TEAM"
)

func (e *TeamType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TeamType(s)
	case string:
		*e = TeamType(s)
	default:
		return fmt.Errorf("unsupported scan type for TeamType: %T", src)
	}
	return nil
}

type NullTeamType struct {
	TeamType TeamType
	Valid    bool // Valid is true if TeamType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTeamType) Scan(value interface{}) error {
	if value == nil {
		ns.TeamType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TeamType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTeamType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TeamType), nil
}

type Integration struct {
	ID                   int64
	TeamID               sql.NullInt64
	IntegrationName      IntegrationType
	IntegrationData      pqtype.NullRawMessage
	GithubInstallationID sql.NullInt64
}

type Monitor struct {
	ID          int64
	TeamID      int64
	MonitorSlug string
	MonitorName string
	Created     time.Time
}

type Team struct {
	ID               int64
	TeamSlug         string
	TeamName         string
	StripeCustomerID sql.NullString
	TeamType         TeamType
	Created          time.Time
}

type TeamInvite struct {
	ID           int64
	InviteCode   string
	TeamID       int64
	InviteeEmail string
	Created      time.Time
}

type TeamMembership struct {
	ID             int64
	TeamID         int64
	UserID         int64
	MembershipType MembershipType
	Created        time.Time
}

type UserInfo struct {
	ID       int64
	Email    string
	FullName string
	Created  time.Time
}

type UserPreference struct {
	ID                 int64
	UserID             int64
	LastAccessedTeamID int64
	Created            time.Time
}
